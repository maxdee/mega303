//
// //  plays a MIDI note.  Doesn't check to see that
// //  cmd is greater than 127, or that data values are  less than 127:
// void midiNoteOn(byte _chanel, byte _pitch, byte _vel) {
// //  Serial.write(cmd);
// //  Serial.write(_pitch);
// //  Serial.write(_vel);
//     midiByte(0x90 | _chanel);
//     midiByte(_pitch);
//     midiByte(_vel);
// }
//
// //  plays a MIDI note.  Doesn't check to see that
// //  cmd is greater than 127, or that data values are  less than 127:
// void midiNoteOff(byte _chan, byte _pitch, byte _vel) {
// //  Serial.write(cmd);
// //  Serial.write(_pitch);
// //  Serial.write(_vel);
//     midiByte(0x80 | _chan);
//     midiByte(_pitch);
//     midiByte(_vel);
// }
//
// //  Sends a MIDI control change
// void midiControlChange(byte channel, byte ccNum, byte value) {
// //  Serial.write(cmd);
// //  Serial.write(pitch);
// //  Serial.write(velocity);
//     midiByte(0xB0 | channel);
//     midiByte(ccNum);
//     midiByte(value);
// }
//
// //  Sends a MIDI RPN change
// void midiRPN(byte channel, byte cc100, byte cc101, byte value) {
//     midiByte(0xB0 | channel);
//     midiByte(0x64);
//     midiByte(cc100);
//     //Serial.write(0xB0 | channel);
//     midiByte(0x65);
//     midiByte(cc101);
//     //Serial.write(0xB0 | channel);
//     midiByte(0x06);
//     midiByte(value);
//     // Set RPN to null so that further spuriuous controller messages are ignored
//     midiByte(0x64);
//     midiByte(0x7F);
//     midiByte(0x65);
//     midiByte(0x7F);
//     // delay(50);
// }
//
// //  Sends a MIDI RPN change
// void midiNRPN(byte channel, byte msb, byte lsb, byte value) {
//     midiByte(0xB0 | channel);
//     midiByte(0x63);
//     midiByte(msb);
//     //Serial.write(0xB0 | channel);
//     midiByte(0x62);
//     midiByte(lsb);
//     //Serial.write(0xB0 | channel);
//     midiByte(0x06);
//     midiByte(value);
//     // Set RPN to null so that further spuriuous controller messages are ignored
//     midiByte(0x62);
//     midiByte(0x7F);
//     midiByte(0x63);
//     midiByte(0x7F);
//     // delay(50);
// }


    // input.setLED(cnt, false);
    // if(_index == ENCODER_BUTTON){
    //     cnt += _state;
    // }
    // if(_index < 40 && millis() > 3000){
    //     if(STEP_LOOKUP[_index] != 0){
    //         if(!_state){
    //             mcPart.noteOn(STEP_LOOKUP[_index]*3+27, 100);
    //         }
    //         else mcPart.noteOff(STEP_LOOKUP[_index]*3+27, 100);
    //     }
    // }
    // if(_index == FUNC_BUTTON){
    //     input.setLED(FUNC_LED, !_state);
    // }
    // if(_state){
    //     if(_index == SELECT_LEFT_BUTTON) cnt--;
    //     else if(_index == SELECT_RIGHT_BUTTON) cnt++;
        // input.setLED(cnt, true);
    // }

    // char _buf[12];
    // sprintf(_buf, "%03d", cnt);
    // input.displayString(_buf);
    // uint8_t note = (_col*3)+32;
    // if(_row == 4 || _row == 0){
    //     uint8_t note = (_col*3)+32;
    //     if(_row == 0) note = ((_col+8)*3)+32;
    //     if(!_state){
    //         mcPart.noteOn(note,100);
    //     }
    //     else {
    //         mcPart.noteOff(note,100);
    //     }
    // }
    // bitWrite(LEDStates[_index / COL_COUNT], _index % COL_COUNT, !_state);
    // Serial.println(_index);
    // if(_index == SHIFT_BUTTON) Serial.println(F("ahahah"));
    // Serial.print("  ");
    // Serial.print(_col);
    // Serial.print("  ");
    // Serial.println(_state);







	// void snifMidiIn(){
	//     if(Serial2.available()){
	//         Serial.println("|||||||||||");
	//         byte _b = 0;
	//         while(Serial2.available()){
	//             _b = Serial2.read();
	//             midiByte(_b);
	//             Serial.print(_b, HEX);
	//             Serial.print("  ");
	//             Serial.println(_b, BIN);
	//         }
	//     }
	// }
